{"version":3,"sources":["utils/validators/validators.js","components/Common/FormsControls/FormsControls.jsx","components/Common/FormsControls/FormsControls.module.css","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","Textarea","input","meta","touched","error","props","hasError","className","styles","form_control","Input","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","name","component","validate","type","formSummaryError","connect","state","isAuth","auth","login","logout","to","container","formData","email","password","rememberMe"],"mappings":"8GAAA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,iJAGEC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GACzC,GAAGA,EAAMG,OAASD,EAAW,MAAM,8RAAN,OAA+DA,EAA/D,Q,mJCHpBE,EAAW,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,gCAC7DC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,aAAe,KAAOH,GAAYE,IAAOJ,QAChE,6BAAK,8CAAcH,EAAWI,KACjCC,GAAY,8BAAOF,KAKXM,EAAQ,SAAC,GAA+C,IAA9CT,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,gCAC1DC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,aAAe,KAAOH,GAAYE,IAAOJ,QAChE,6BAAK,2CAAWH,EAAWI,KAC9BC,GAAY,8BAAOF,M,oBCjBxBO,EAAOC,QAAU,CAAC,aAAe,oCAAoC,MAAQ,6BAA6B,iBAAmB,0C,oBCA7HD,EAAOC,QAAU,CAAC,UAAY,2B,iCCD9B,yGAwCMC,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EA/BL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcZ,EAAY,EAAZA,MACjC,OACE,0BAAMa,SAAUD,GACd,qCACA,6BACE,kBAAC,IAAD,CACEE,YAAa,SACbC,KAAM,QACNC,UAAWV,IACXW,SAAU,CAAC1B,QAGf,6BACE,kBAAC,IAAD,CACEuB,YAAa,uCACbC,KAAM,WACNG,KAAM,WACNF,UAAWV,IACXW,SAAU,CAAC1B,QAGf,6BACE,2BAAO2B,KAAM,WAAYH,KAAM,aAAcC,UAAWV,OAEzDN,GAAS,yBAAKG,UAAWC,IAAOe,kBAAmBnB,GACpD,6BACE,uEA6BOoB,uBANS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,UAIiB,CAAEE,UAAOC,YAAlCL,EAtBD,SAACnB,GAKb,OAAIA,EAAMqB,OACD,kBAAC,IAAD,CAAUI,GAAI,aAIrB,yBAAKvB,UAAWC,IAAOuB,WACrB,kBAAClB,EAAD,CAAgBI,SAVH,SAACe,GAChB3B,EAAMuB,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.4ab5219f.chunk.js","sourcesContent":["export const required = value => {\n    if(value) return undefined;\n    return \"Поле должно быть заполнено\";\n}\n\nexport const maxLengthCreator = maxLength => value => {\n    if(value.length > maxLength) return `Вы ввели максимально допустимое количество символов (${maxLength})`;\n    return undefined;\n}","import React from \"react\";\nimport styles from \"./FormsControls.module.css\";\n\nexport const Textarea = ({input, meta: {touched, error}, ...props}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.form_control + \" \" + (hasError && styles.error)} >\n        <div><textarea {...input} {...props} /></div>    \n    {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Input = ({input, meta: {touched, error}, ...props}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.form_control + \" \" + (hasError && styles.error)} >\n        <div><input {...input} {...props} /></div>    \n    {hasError && <span>{error}</span>}\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_control\":\"FormsControls_form_control__11y0-\",\"error\":\"FormsControls_error__35B8G\",\"formSummaryError\":\"FormsControls_formSummaryError__3e7lO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1Oz4Y\"};","import React from \"react\";\nimport { reduxForm, Field } from \"redux-form\";\nimport { required } from \"./../../utils/validators/validators.js\";\nimport { Input } from \"./../Common/FormsControls/FormsControls.jsx\";\nimport { connect } from \"react-redux\";\nimport { login, logout } from \"./../../redux/authReducer\";\nimport { Redirect } from \"react-router-dom\";\nimport styles from \"./Login.module.css\";\n\nconst LoginForm = ({ handleSubmit, error }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>LOGIN</h1>\n      <div>\n        <Field\n          placeholder={\"E-mail\"}\n          name={\"email\"}\n          component={Input}\n          validate={[required]}\n        />\n      </div>\n      <div>\n        <Field\n          placeholder={\"Пароль\"}\n          name={\"password\"}\n          type={\"password\"}\n          component={Input}\n          validate={[required]}\n        />\n      </div>\n      <div>\n        <input type={\"checkbox\"} name={\"rememberMe\"} component={Input} />\n      </div>\n      {error && <div className={styles.formSummaryError}>{error}</div>}\n      <div>\n        <button>Войти</button>\n      </div>\n    </form>\n  );\n};\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\n\nconst Login = (props) => {\n  const onSubmit = (formData) => {\n    props.login(formData.email, formData.password, formData.rememberMe);\n  };\n\n  if (props.isAuth) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div className={styles.container}>\n      <LoginReduxForm onSubmit={onSubmit} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport default connect(mapStateToProps, { login, logout })(Login);\n"],"sourceRoot":""}